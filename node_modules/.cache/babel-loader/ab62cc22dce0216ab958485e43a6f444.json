{"ast":null,"code":"var _jsxFileName = \"/home/cedcoss/Desktop/Frontend Task/Test/passwordgenrator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // State to hold password\n  const [password, setPassword] = useState(\"\");\n  var passw = \"\";\n\n  const genrate = e => {\n    e.preventDefault();\n    const smallLetter = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    const number = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"@\"]; // Loop to genrate random index for password\n\n    for (let i = 0; i < 3; i++) {\n      passw += smallLetter[Math.floor(1 + Math.random() * 25)];\n      passw += smallLetter[Math.floor(1 + Math.random() * 25)].toUpperCase();\n      passw += number[Math.floor(1 + Math.random() * 9)];\n    }\n\n    document.querySelector(\"#pass\").innerHTML = `Password is : ${passw}`;\n  };\n\n  const copy = e => {\n    e.preventDefault();\n\n    if (passw === \"\") {\n      document.querySelector(\"#pass\").innerHTML = \"Genrate password first\";\n    }\n\n    setPassword(passw);\n    alert(`Your password (${passw}) is copied`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: genrate,\n        children: \"Click to Genrate Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"pass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: copy,\n        children: \"Click to Copy Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"fsE4KjUtTGid/UZc9Uo/kD8+5F8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","password","setPassword","passw","genrate","e","preventDefault","smallLetter","number","i","Math","floor","random","toUpperCase","document","querySelector","innerHTML","copy","alert"],"sources":["/home/cedcoss/Desktop/Frontend Task/Test/passwordgenrator/src/App.js"],"sourcesContent":["\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  // State to hold password\n  const [password, setPassword] = useState(\"\");\n  var passw=\"\";\n\n  const genrate = (e) => {\n    e.preventDefault();\n\n    const smallLetter = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    const number = [\"0\", \"1\", \"2\", \"3\", \"4\",\"5\", \"6\", \"7\", \"8\", \"9\",\"@\"];\n    \n\n    // Loop to genrate random index for password\n    for(let i=0;i<3;i++){\n      passw += smallLetter[Math.floor(1+Math.random()*25)];\n      passw+=smallLetter[Math.floor(1+Math.random()*25)].toUpperCase();\n      passw+=number[Math.floor(1+Math.random()*9)];\n     \n    }\n    \n    document.querySelector(\"#pass\").innerHTML = `Password is : ${passw}`;\n  \n\n  }\n  const copy = (e) => {\n    e.preventDefault();\n    if(passw === \"\"){\n      document.querySelector(\"#pass\").innerHTML = \"Genrate password first\"\n    }\n    setPassword(passw);\n    alert( `Your password (${passw}) is copied`);\n\n  }\n  return (\n    <>\n      <div className='container'>\n        <button onClick={genrate}>Click to Genrate Password</button>\n        <p id='pass'></p>\n        <button onClick={copy}>Click to Copy Password</button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;EACA,IAAII,KAAK,GAAC,EAAV;;EAEA,MAAMC,OAAO,GAAIC,CAAD,IAAO;IACrBA,CAAC,CAACC,cAAF;IAEA,MAAMC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,EAAgG,GAAhG,EAAqG,GAArG,EAA0G,GAA1G,EAA+G,GAA/G,EAAoH,GAApH,EAAyH,GAAzH,EAA8H,GAA9H,CAApB;IACA,MAAMC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAiD,GAAjD,CAAf,CAJqB,CAOrB;;IACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EAAoB;MAClBN,KAAK,IAAII,WAAW,CAACG,IAAI,CAACC,KAAL,CAAW,IAAED,IAAI,CAACE,MAAL,KAAc,EAA3B,CAAD,CAApB;MACAT,KAAK,IAAEI,WAAW,CAACG,IAAI,CAACC,KAAL,CAAW,IAAED,IAAI,CAACE,MAAL,KAAc,EAA3B,CAAD,CAAX,CAA4CC,WAA5C,EAAP;MACAV,KAAK,IAAEK,MAAM,CAACE,IAAI,CAACC,KAAL,CAAW,IAAED,IAAI,CAACE,MAAL,KAAc,CAA3B,CAAD,CAAb;IAED;;IAEDE,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA6C,iBAAgBb,KAAM,EAAnE;EAGD,CAlBD;;EAmBA,MAAMc,IAAI,GAAIZ,CAAD,IAAO;IAClBA,CAAC,CAACC,cAAF;;IACA,IAAGH,KAAK,KAAK,EAAb,EAAgB;MACdW,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4C,wBAA5C;IACD;;IACDd,WAAW,CAACC,KAAD,CAAX;IACAe,KAAK,CAAG,kBAAiBf,KAAM,aAA1B,CAAL;EAED,CARD;;EASA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE;QAAQ,OAAO,EAAEC,OAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAG,EAAE,EAAC;MAAN;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAQ,OAAO,EAAEa,IAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AASD;;GA3CQjB,G;;KAAAA,G;AA6CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}